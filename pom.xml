<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.2.6.RELEASE</version>
  </parent>
  <groupId>edu.lez.boot8java11</groupId>
  <artifactId>spring-boot8java11</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>spring-boot8java11</name>
  <description />
	<url />
	<inceptionYear />
	<organization />
	<licenses />


	<developers />
	<contributors />


	<mailingLists />


	<!-- **(6)Prerequisites** -->
	<!-- <prerequisites /> -->


	<!-- **(7)Modules** -->
	<modules />
	
		<!-- **(9)Properties** -->
	<properties>
		<maven.version>3.3.9</maven.version>
		<maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
		<maven.compiler.source>11</maven.compiler.source>
		<maven.compiler.target>11</maven.compiler.target>
		<!-- <java.version>11</java.version>-->
		<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
		<sonar.coverage.exclusions>
			<!-- excluding POJOs -->
		    **/edu/lez/boot8java11/dto/**/*.*,
			**/edu/lez/boot8java11/model/**/*.*
		</sonar.coverage.exclusions>
		<!-- END cross-project -->
		<package.generated>boot8java11.generated</package.generated>
		<build-helper-maven-plugin.version>3.0.0</build-helper-maven-plugin.version>
		<javax-validation.version>2.0.0.Final</javax-validation.version>
		<h2.version>1.4.200</h2.version>
		<!-- <lombok.version>1.18.6 is managed by spring boot 2.13</lombok.version> -->
		<maven-surefire-plugin.version>3.0.0-M3</maven-surefire-plugin.version>
		<maven-antrun-plugin.version>1.8</maven-antrun-plugin.version>
		<openapi-generator.version>4.3.1</openapi-generator.version><!-- 4.3.0 -->
		<jaxws-ri-version>2.3.3-b01</jaxws-ri-version>
		<springdoc.version>1.3.7</springdoc.version>
		
	</properties>
  
  	<!-- **(10)Dependency management and dependencies** -->
	<dependencyManagement />
	<dependencies>
		<!-- Spring Boot actuator enablement -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<!-- Typical dependency for a web app (needed if not using Activiti) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!-- Typical dependency for a data app (needed if not using Activiti) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<!-- Typical dependency for a security app (needed if not using Activiti) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>

		<dependency>
			<!-- Spring Boot cache starter -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-cache</artifactId>
		</dependency>
		<dependency>
			<!-- https://www.baeldung.com/spring-data-rest-intro -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-rest</artifactId>
	</dependency>

		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-rest-hal-explorer</artifactId>
		</dependency>
		
		<!-- 2.0.0.RELEASE -->
		   <dependency>
            <groupId>org.springframework.plugin</groupId>
            <artifactId>spring-plugin-core</artifactId>
            <version>2.0.0.RELEASE</version>
        </dependency>
        
		<!-- H2 for testing purposes. -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope><!-- prueba 12-05-2020 -->
			<!-- <version>${h2.version}</version> -->
			<!-- <scope>test</scope> convenience for development time execution -->
		</dependency>

			<dependency>
			<groupId>org.liquibase</groupId>
			<artifactId>liquibase-core</artifactId>
			<!-- <version>${liquibase.version}</version> -->
		</dependency>

		<dependency>
			<!-- Cache Hazelcast (1 of 2) -->
			<groupId>com.hazelcast</groupId>
			<artifactId>hazelcast</artifactId>
		</dependency>
		<dependency>
			<!-- Cache Hazelcast Spring (2 of 2) -->
			<groupId>com.hazelcast</groupId>
			<artifactId>hazelcast-spring</artifactId>
		</dependency>

		<!-- Testing -->
		<dependency>
			<!-- imports both Spring Boot test modules as well has JUnit, AssertJ, 
				Hamcrest and other useful libraries -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	
		<dependency>
    	<groupId>org.springdoc</groupId>
    		<artifactId>springdoc-openapi-ui</artifactId>
    		<version>${springdoc.version}</version>
		</dependency>
		<dependency>
              <groupId>org.springdoc</groupId>
              <artifactId>springdoc-openapi-webmvc-core</artifactId>
              <version>${springdoc.version}</version>
        </dependency>
         <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-data-rest</artifactId>
      <version>${springdoc.version}</version>
   </dependency>

		<dependency>
			<!-- https://projectlombok.org -->
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<!-- managed - <version>${lombok.version}</version> -->
			<scope>provided</scope>
		</dependency>

		<dependency>
			<!-- Needed by swagger codegen (because of BOF issue with deserialization 
				of time fields) -->
			<groupId>com.github.joschi.jackson</groupId>
			<artifactId>jackson-datatype-threetenbp</artifactId>
			<!-- v2.8.4 misses class com.fasterxml.jackson.datatype.threetenbp.DateTimeUtils --> 
			<version>2.6.4</version>
		</dependency>

		<dependency>
			<!-- [1/5] www.baeldung.com/javax-validation -->
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<!-- managed -->
		</dependency>
		<dependency>
			<!-- [2/5] www.baeldung.com/javax-validation -->
			<groupId>org.hibernate.validator</groupId>
			<artifactId>hibernate-validator</artifactId>
			<!-- springboot 2.1.0 manages 6.0.13.Final <version>6.0.2.Final</version> -->
		</dependency>

		<dependency>
			<!-- ESTE PUEDE QUE HAYA QUE QUITARLO, PUES ESTA EN LA JAVA 11
			JSR 354 – “Currency and Money” -->
			<groupId>org.javamoney</groupId>
			<artifactId>moneta</artifactId>
			<version>1.3</version>
			<type>pom</type>
		</dependency>
		<dependency>
			<!-- ESTE PUEDE QUE HAYA QUE QUITARLO POR ESTAR INCLUIDO EN LA 11 
			JSR-310 date time extras, eg: Interval -->
			<groupId>org.threeten</groupId>
			<artifactId>threeten-extra</artifactId>
			<version>1.5.0</version>
		</dependency>

		<dependency>
			<!-- Needed for compiling openapi (v4.1.x) generated code -->
			<groupId>org.openapitools</groupId>
			<artifactId>jackson-databind-nullable</artifactId>
			<version>0.2.0</version>
		</dependency>

		<dependency>
			<!-- ESTE PUEDE QUE HAYA QUE QUITARLO POR ESTAR INCLUIDO EN LA 11  -->
			<!-- Making Jackson recognize Java 8 Date & Time API data types -->
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-jsr310</artifactId>
		</dependency>

		<dependency>
			<groupId>com.google.code.findbugs</groupId>
			<artifactId>annotations</artifactId>
			<version>3.0.1</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<!-- <version>SpringBoot 2.1.4 defines gson.version 2.8.5</version> -->
		</dependency>

		
		<!-- añadiendo dependencia jaxws-ri java 11-->
		<!-- https://mvnrepository.com/artifact/com.sun.xml.ws/jaxws-ri -->
		<dependency>
			<groupId>com.sun.xml.ws</groupId>
			<artifactId>jaxws-ri</artifactId>
			<version>${jaxws-ri-version}</version>
			<type>pom</type>
		</dependency>	
	</dependencies>
	
	<!-- **(12)Build** -->
	<build>
		<finalName>${project.artifactId}</finalName>
		<pluginManagement>
			<plugins>
				<plugin>
					<!-- Java and Maven version enforcement. mvn enforcer:display-info -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-enforcer-plugin</artifactId>
					<version>${maven-enforcer-plugin.version}</version>
					<executions>
						<execution>
							<id>enforce-versions</id>
							<goals>
								<goal>enforce</goal>
							</goals>
						</execution>
						<execution>
							<id>enforce-dependencyConvergence</id>
							<configuration>
								<rules>
									<DependencyConvergence />
								</rules>
								<fail>false</fail>
							</configuration>
							<goals>
								<goal>enforce</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<rules>
							<requireMavenVersion>
								<message>You are running an older version of Maven. Technical
									component requires at least Maven ${maven.version}</message>
								<version>[${maven.version},)</version>
							</requireMavenVersion>
							<requireJavaVersion>
								<message>You are running an incompatible version of Java.
									Technical component supports JDK 11.</message>
								<version>[11,12)</version>
							</requireJavaVersion>
						</rules>
					</configuration>
				</plugin>

				<!-- <plugin>
					<groupId>org.springdoc</groupId>
					<artifactId>springdoc-openapi-maven-plugin</artifactId>
					<version>1.0</version>
					<executions>
						<execution>
							<id>integration-test</id>
							<goals>
								<goal>generate</goal>
							</goals>
						</execution>
					</executions>
				</plugin>		-->		
				
				<!-- INI prueba de concepto  lifecycle-mapping-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>findbugs-maven-plugin</artifactId>
										<versionRange>[3.0.5,)</versionRange>
										<goals>
											<goal>check</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.openapitools</groupId>
										<artifactId>openapi-generator-maven-plugin</artifactId>
										<versionRange>[${openapi-generator.version},)</versionRange>
										<goals>
											<goal>generate</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>com.sun.xml.ws</groupId>
										<artifactId>jaxws-maven-plugin</artifactId>
										<versionRange>[2.3.3,)</versionRange>
										<goals>
											<goal>wsimport</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-antrun-plugin</artifactId>
										<versionRange>[1.4,)</versionRange>
										<goals>
											<goal>run</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-pmd-plugin</artifactId>
										<versionRange>[3.10.0,)</versionRange>
										<goals>
											<goal>check</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
					
				<!-- END prueba de concepto  lifecycle-mapping-->
		</plugins>
		</pluginManagement>
		
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
			</plugin>
			
		<plugin>
				<!-- Compiler -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version> 
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${lombok.version}</version>
						</path>
					</annotationProcessorPaths>
					<encoding>UTF-8</encoding>
					<!-- ini prueba 03 mayo 2020 -->
            			<source>11</source><!-- 11 -->
            			<target>11</target><!-- 11 -->
					<!-- fin prueba 03 mayo 2020-->				
				</configuration>
			</plugin>
			
				<plugin>
				<!-- adding generated source (it adds a new build_class_path to the project) -->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<!-- <version>${build-helper-maven-plugin.version}</version> -->
				<executions>
					<execution>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<!-- para ficheros rest<source>${project.build.directory}/generated-sources/openapi/src/main/java</source>-->
								<source>${project.build.directory}/generated-sources/wsimport</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			
			<!-- INI plugin jax-ws -->
				<plugin>
				<!-- Plugin from org.codehaus.mojo not updated since 2017 and it fails with jdk11.
				     Alternatives seem to be com.helger.maven or com.sun.xml.ws
				-->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jaxws-maven-plugin</artifactId>
				<version>2.6</version> 
				<dependencies>
					<dependency>
						<groupId>com.sun.xml.ws</groupId>
						<artifactId>jaxws-tools</artifactId>
						<version>2.3.3</version><!-- 2.3.2 -->
					</dependency>
					<dependency>
						<groupId>javax.jws</groupId>
						<artifactId>jsr181-api</artifactId>
						<version>1.0-MR1</version>
					</dependency>
					<dependency>
						<!-- put xjc-plugins on the jaxws-maven-plugin's classpath -->
						<groupId>org.jvnet.jaxb2_commons</groupId>
						<artifactId>jaxb2-basics-runtime</artifactId>
						<version>1.11.1</version>
					</dependency>
				</dependencies>
				<executions>
					<execution>
						<goals>
							<goal>wsimport</goal>
						</goals>
						<configuration>
							<vmArgs>
								<!-- Needed with JAXP 1.5 -->
								<vmArg>-Djavax.xml.accessExternalSchema=all</vmArg>
							</vmArgs>
							<xjcArgs>
								<!-- Enable "-B-XautoNameResolution" ONLY if needed: <xjcArg>-XautoNameResolution</xjcArg> -->
								<xjcArg>-XautoNameResolution</xjcArg>
								<!-- <xjcArg>-XuseBaseResourceAndURLToLoadWSDL</xjcArg> -->
							</xjcArgs>
							<bindingDirectory>${project.basedir}/src/main/resources/jaxws</bindingDirectory>
							<bindingFiles>
								<bindingFile>wsdl_bindings.xjb</bindingFile>						
							</bindingFiles>
							<keep>true</keep>
							<sourceDestDir>${project.build.directory}/generated-sources/wsimport</sourceDestDir>
							<xnoAddressingDataBinding>false</xnoAddressingDataBinding>
							<xuseBaseResourceAndURLToLoadWSDL>true</xuseBaseResourceAndURLToLoadWSDL>
							<wsdlDirectory>${project.basedir}/src/main/resources/wsdls</wsdlDirectory>
							<wsdlFiles>
								<!-- produces wsdlLocation = {wsdlLocation}{wsdlFile} -->
								<wsdlFile>example.wsdl</wsdlFile>
							</wsdlFiles>					
						</configuration>
					</execution>
				</executions>
			</plugin>
				<!-- END plugin jax-ws -->
				
					<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			
<!-- 						It generates a 'public/version.properties' file > http://localhost:8080/version -->
				<!-- <version>1.6</version> -->			
				<!-- <plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<phase>process-resources</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<tstamp>
									<format property="last.updated"
										pattern="yyyy-MM-dd'T'HH:mm:ssZ" timezone="Z" />
								</tstamp>
								<propertyfile
									file="${basedir}/target/classes/public/version.properties"
									comment="Compilation information generated">
									<entry key="build.time" value="${last.updated}" />
									<entry key="project.groupId" value="${project.groupId}" />
									<entry key="project.artifactId"
										value="${project.artifactId}" />
									<entry key="project.version" value="${project.version}" />
								</propertyfile>
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>  -->
		</plugins>
		</build>
</project>